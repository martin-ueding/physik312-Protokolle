#!/usr/bin/python
# -*- coding: utf-8 -*-

# Copyright Â© 2013 Martin Ueding <dev@martin-ueding.de>

import argparse
import matplotlib.pyplot as pl
import numpy as np
import scipy.optimize as op

__docformat__ = "restructuredtext en"

def main():
    options = _parse_args()

###############################################################################
#                                  Aufgabe b                                  #
###############################################################################

    a_f = 0.5
    a_D = 6.1e-3
    a_D_err = 0.001e-3

    a_L = 0.20
    a_L_err = 0.05

###############################################################################
#                                  Aufgabe c                                  #
###############################################################################

    c_B = 0.012
    c_b = 1.00
    c_B_err = 0.1e-2
    c_b_err = 0.5e-2
    c_f = 0.175
    c_g = 0.215
    c_g_err = 0.5e-2

###############################################################################
#                                  Aufgabe d                                  #
###############################################################################

    err = 0.3e-3

    data = np.genfromtxt("d.csv", delimiter="\t")

    m = data[:,0]
    phi = (data[:,1] - data[:,2])/2

    phi_err = 0.3e-3

    pl.errorbar(m, phi, yerr=phi_err, linestyle="none", marker="+")
    pl.grid(True)
    pl.savefig("d.pdf")
    pl.clf()

###############################################################################
#                                  Aufgabe e                                  #
###############################################################################

###############################################################################
#                                  Aufgabe f                                  #
###############################################################################

    f = 0.10

    m = [2, 4, 7]
    B = [1.4e-2, 0.8e-2, 1.8e-2]
    B_err = [0.001, 0.001, 0.002]
    b = [1.0, 1.0, 3.30]
    g = [0, 0, 0.105]


def _parse_args():
    """
    Parses the command line arguments.

    :return: Namespace with arguments.
    :rtype: Namespace
    """
    parser = argparse.ArgumentParser(description="")
    #parser.add_argument("args", metavar="N", type=str, nargs="*", help="Positional arguments.")
    #parser.add_argument("", dest="", type="", default=, help=)
    #parser.add_argument("--version", action="version", version="<the version>")

    return parser.parse_args()


if __name__ == "__main__":
    main()

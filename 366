#!/usr/bin/python
# -*- coding: utf-8 -*-

# Copyright © 2013 Martin Ueding <dev@martin-ueding.de>

import argparse
import matplotlib.pyplot as pl
import numpy as np
import scipy.optimize as op

__docformat__ = "restructuredtext en"

def main():
    options = _parse_args()

    data = np.genfromtxt("b.csv")
    alpha = np.radians(data[:,0] + data[:,1] / 60)
    alpha_err = np.radians(2.0/60)
    gamma = np.abs(alpha[0] - alpha[1]) / 2
    gamma_err = np.sqrt(2) * (alpha_err / 2)

    print "γ = {:.3g} ± {:.3g} rad".format(gamma, gamma_err)

    namen = [u"rot", u"gelb", u"grün", u"cyan", u"blau 1", u"blau 2", u"blau 3", u"violett"]

    data = np.genfromtxt("c.csv")
    lambda_ = data[:,0]
    alpha = np.column_stack([
        np.radians(data[:,1] + data[:,2] / 60),
        np.radians(data[:,3] + data[:,4] / 60),
    ])

    delta = (alpha[:,1] - alpha[:,0])/2

    for name, d in zip(namen, delta):
        print name, d

    def cauchy(lambda_, k1, k2):
        return k1 + k2 / lambda_**2

    popt, pconv = op.curve_fit(cauchy, lambda_, delta)
    x = np.linspace(min(lambda_), max(lambda_))
    y = cauchy(x, *popt)
    pl.plot(x, y, label=u"Cauchy-Fit")

    print np.column_stack([popt, np.sqrt(pconv.diagonal())])

    pl.plot(lambda_, delta, marker="o", label="Messdaten")
    pl.grid(True)
    pl.legend(loc="best")
    pl.title(u"Quecksilber-Cadmium-Lampe")
    pl.xlabel(ur"Wellenlänge $\lambda / \mathrm{nm}$")
    pl.ylabel(ur"Ablenkwinkel $\delta / \mathrm{rad}$")
    pl.savefig("Plot_c.pdf")
    pl.clf()

def _parse_args():
    """
    Parses the command line arguments.

    :return: Namespace with arguments.
    :rtype: Namespace
    """
    parser = argparse.ArgumentParser(description="")
    #parser.add_argument("args", metavar="N", type=str, nargs="*", help="Positional arguments.")
    #parser.add_argument("", dest="", type="", default=, help=)
    #parser.add_argument("--version", action="version", version="<the version>")

    return parser.parse_args()


if __name__ == "__main__":
    main()

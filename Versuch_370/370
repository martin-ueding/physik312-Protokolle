#!/usr/bin/python
# -*- coding: utf-8 -*-

# Copyright © 2013 Martin Ueding <dev@martin-ueding.de>

import argparse
import matplotlib.pyplot as pl
import numpy as np
import scipy.optimize as op

__docformat__ = "restructuredtext en"

def main():
    options = _parse_args()

###############################################################################
#                                  Aufgabe a                                  #
###############################################################################

    a_data = np.genfromtxt("a.csv", delimiter="\t")

    dunkelstrom = 0.0082

    U = a_data[:,1] - dunkelstrom
    phi = a_data[:,0]


    def malus(phi, phi0, I0, baseline):
        return I0 * (np.cos(np.radians(phi - phi0)))**2 + baseline

    popt, pconv = op.curve_fit(malus, phi, U, p0=[90, 2, 0])

    print "φ₀ = {:.3f} ± {:.3f}, U₀ = {:.3f} ± {:.3f}, U₁ = {:.3f} ± {:.3f}".format(
        popt[0],
        np.sqrt(pconv.diagonal())[0],
        popt[1],
        np.sqrt(pconv.diagonal())[1],
        popt[2],
        np.sqrt(pconv.diagonal())[2],
    )

    x = np.linspace(min(phi), max(phi), 100)
    y = malus(x, *popt)

    I_max_val = popt[1] + popt[2]
    I_min_val = popt[2]

    I_max_err = np.sqrt(
        np.sqrt(pconv.diagonal())[1]**2
        + np.sqrt(pconv.diagonal())[2]**2
    )
    I_min_err = np.sqrt(pconv.diagonal())[2]

    PG_val = (I_max_val - I_min_val) / (I_max_val + I_min_val)
    PG_err = np.sqrt(
        ((-((I_max_val - I_min_val)/(I_max_val + I_min_val)**2) + 1/(I_max_val + I_min_val)) * I_max_err)**2
        +((-((I_max_val - I_min_val)/(I_max_val + I_min_val)**2) - 1/(I_max_val + I_min_val) * I_min_err)**2)
    )

    print "I_max = {:.3f} ± {:.3f}, I_min = {:.3f} ± {:.3f}, PG = {:.3f} ± {:.3f}".format(
        I_max_val,
        I_max_err,
        I_min_val,
        I_min_err,
        PG_val,
        PG_err,
    )
    
    pl.errorbar(phi, U, xerr=1, yerr=0.01, label="Messdaten", linestyle="none")
    pl.plot(x, y, label="Fit")
    pl.grid(True)
    pl.legend(loc="best")
    pl.title(u"Intensitätstransmission nach zweitem Polfilter")
    pl.xlabel(ur"$\phi / ^\circ$")
    pl.ylabel(ur"$U / \mathrm{V}$")
    pl.savefig("a.pdf")
    pl.clf()

###############################################################################
#                                  Aufgabe b                                  #
###############################################################################

    b = {}
    diff = {}

    wavelengths = [694.0, 620.0, 568.0, 520.0, 488.0, 458.0, 430.0]

    for wavelength in wavelengths:
        b[wavelength] = np.genfromtxt("b-{0}.csv".format(int(wavelength)), delimiter="\t")
        phi0 = b[wavelength][:,0]
        phi = b[wavelength][:,1]
        diff[wavelength] = phi0 - phi + 90

    plot_x = (np.array(wavelengths)/10**3)**(-2)
    plot_y = np.array([np.mean(diff[wavelength]) for wavelength in wavelengths])
    plot_y_err = np.array(np.sqrt([np.std(diff[wavelength]) for wavelength in wavelengths]))

    print np.column_stack([plot_x, plot_y, plot_y_err])

    def linear(invers, A, B):
        return A + invers*B

    popt, pconv = op.curve_fit(linear, plot_x, plot_y, sigma=plot_y_err)

    col = np.column_stack([plot_x, plot_y, plot_y_err])
    np.savetxt("test.txt", col)

    A_val = popt[0]
    A_err = np.sqrt(pconv.diagonal()[0])
    B_val = popt[1]
    B_err = np.sqrt(pconv.diagonal()[1])

    print "A = {:.3f} ± {:.3f}".format(A_val, A_err)
    print "B = {:.3f} ± {:.3f}".format(B_val, B_err)

    x = np.linspace(min(plot_x), max(plot_x), 100)
    y = linear(x, *popt)

    pl.errorbar(plot_x, plot_y, yerr=plot_y_err, linestyle="none",
                marker="+", label="Messdaten")
    pl.plot(x, y, label="Fit")
    pl.title(u"Drehwinkel als Funktion der Wellenlänge")
    pl.xlabel(ur"$\lambda^{-2}/\mathrm{\mu m^{-2}}$")
    pl.ylabel(ur"$\phi - \phi_0 / ^\circ$")
    pl.legend(loc="best")
    pl.grid(True)
    pl.savefig("b.pdf")
    pl.clf()

###############################################################################
#                                  Aufgabe c                                  #
###############################################################################

    nullpunkt = -86.0

    konzentrationen = [1, 2, 3, 4, 5]
    diffs = []

    for konz in konzentrationen:
        data = np.genfromtxt("c-{}.csv".format(konz), delimiter="\t")

        winkel = (data[:,0] - data[:,1]) - nullpunkt

        diff = np.degrees(np.arccos(np.abs(np.cos(np.radians(winkel)))))

        diffs.append((float(konz), np.mean(diff), np.sqrt(np.std(diff)**2 + 4)))

    diffs = np.array(diffs)

    print diffs

    x = diffs[:,0]
    y = diffs[:,1]
    y_err = diffs[:,2]

    popt, pconv = op.curve_fit(linear, x, y, sigma=y_err)

    A_val = popt[0]
    A_err = np.sqrt(pconv.diagonal()[0])
    B_val = popt[1]
    B_err = np.sqrt(pconv.diagonal()[1])

    print "A = {:.3f} ± {:.3f}".format(A_val, A_err)
    print "B = {:.3f} ± {:.3f}".format(B_val, B_err)

    c = popt[1]
    c_err = np.sqrt(pconv.diagonal()[1])

    print "c = {:.3f} ± {:.3f} °l/mol".format(c, c_err)

    data = np.genfromtxt("c-unbekannt.csv", delimiter="\t")

    winkel = (data[:,0] - data[:,1]) - nullpunkt
    diff = np.degrees(np.arccos(np.abs(np.cos(np.radians(winkel)))))

    mean = np.mean(diff)
    mean_err = np.sqrt(np.std(diff)**2 + 4)

    print "Drehfähigkeit der unbekannten Lösung: {:.3f}° ± {:.3f}°".format(mean, mean_err)

    konz = mean/c
    konz_err = np.sqrt(
        (mean_err/c)**2
        + (mean/c**2 * c_err)**2
    )

    print "Konzentration: {:.3f} ± {:.3f} mol/l".format(konz, konz_err)

    plot_x = np.linspace(0, max(x), 100)
    plot_y = linear(plot_x, *popt)

    pl.errorbar(x, y, y_err, linestyle="none", marker="+", label="Messdaten")
    pl.errorbar(konz, mean, xerr=konz_err, yerr=mean_err, label=u"unbekannte Konzentration",
                linestyle="none", marker="o", )
    pl.plot(plot_x, plot_y, label="Fit")
    pl.title(u"Drehvermögen gegen Konzentration")
    pl.xlabel(ur"Konzentration in $\mathrm{mol/l}$")
    pl.ylabel(ur"$\phi - \phi_0 / ^\circ$")
    pl.grid(True)
    pl.legend(loc="best")
    pl.savefig("c.pdf")
    pl.clf()


def _parse_args():
    """
    Parses the command line arguments.

    :return: Namespace with arguments.
    :rtype: Namespace
    """
    parser = argparse.ArgumentParser(description="")
    #parser.add_argument("args", metavar="N", type=str, nargs="*", help="Positional arguments.")
    #parser.add_argument("", dest="", type="", default=, help=)
    #parser.add_argument("--version", action="version", version="<the version>")

    return parser.parse_args()


if __name__ == "__main__":
    main()

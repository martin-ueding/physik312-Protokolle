#!/usr/bin/python
# -*- coding: utf-8 -*-

# Copyright © 2013 Martin Ueding <dev@martin-ueding.de>

import argparse
import matplotlib.pyplot as pl
import numpy as np
import scipy.optimize as op

__docformat__ = "restructuredtext en"

def main():
    options = _parse_args()

    data = np.genfromtxt("a-leer.csv", delimiter="\t")
    t = data[:,0]
    U = data[:,1]
    U_err = 0.7

    offset = 7.8/10

    print "Maximale Spannung: {:.3g} mV".format(offset)

    pl.errorbar(t, U, yerr=U_err, linestyle="none", marker="+")
    pl.grid(True)
    pl.xlabel(ur"Temperatur $T / ^\circ\mathrm{C}$")
    pl.ylabel(ur"Thermospannung $U / \mathrm{mV}$")
    pl.savefig("Plot_a-leer.pdf")
    pl.clf()

    data = np.genfromtxt("a-Lampe.csv", delimiter="\t")
    t = data[:,0]
    U = data[:,1] - offset

    pl.errorbar(t, U, yerr=U_err, linestyle="none", marker="+")
    pl.grid(True)
    pl.xlabel(ur"Temperatur $T / ^\circ\mathrm{C}$")
    pl.ylabel(ur"Thermospannung $U / \mathrm{mV}$")
    pl.savefig("Plot_a-Lampe.pdf")
    pl.clf()

    # Lesliewürfel

    glanz = np.genfromtxt("b-glanz.csv", delimiter="\t")
    matt = np.genfromtxt("b-matt.csv", delimiter="\t")
    schwarz = np.genfromtxt("b-schwarz.csv", delimiter="\t")
    weiss = np.genfromtxt("b-weiss.csv", delimiter="\t")

    T0 = 19.0

    glanz[:,0] += 273.15
    matt[:,0] += 273.15
    schwarz[:,0] += 273.15
    weiss[:,0] += 273.15

    T_err = 0.3

    sigma = 5.670373e-8

    def boltzmann(T, epsilon, offset):
        return epsilon * sigma * T**4 + offset

    glanz_popt, glanz_pconv = op.curve_fit(boltzmann, glanz[:,0], glanz[:,1]-offset)
    matt_popt, matt_pconv = op.curve_fit(boltzmann, matt[:,0], matt[:,1]-offset)
    schwarz_popt, schwarz_pconv = op.curve_fit(boltzmann, schwarz[:,0], schwarz[:,1]-offset)
    weiss_popt, weiss_pconv = op.curve_fit(boltzmann, weiss[:,0], weiss[:,1]-offset)

    glanz_x = np.linspace(min(glanz[:,0]), max(glanz[:,0]))
    glanz_y = boltzmann(glanz_x, *glanz_popt)
    pl.plot(glanz_x, glanz_y, label="Fit glanz", color="gold")

    matt_x = np.linspace(min(matt[:,0]), max(matt[:,0]))
    matt_y = boltzmann(matt_x, *matt_popt)
    pl.plot(matt_x, matt_y, label="Fit matt", color="yellow")

    schwarz_x = np.linspace(min(schwarz[:,0]), max(schwarz[:,0]))
    schwarz_y = boltzmann(schwarz_x, *schwarz_popt)
    pl.plot(schwarz_x, schwarz_y, label="Fit schwarz", color="black")

    weiss_x = np.linspace(min(weiss[:,0]), max(weiss[:,0]))
    weiss_y = boltzmann(weiss_x, *weiss_popt)
    pl.plot(weiss_x, weiss_y, label="Fit weiss", color="gray")

    print "glanz ε = {:.3g} ± {:.3g}".format(glanz_popt[0], np.sqrt(glanz_pconv.diagonal()[0]))
    print "matt ε = {:.3g} ± {:.3g}".format(matt_popt[0], np.sqrt(matt_pconv.diagonal()[0]))
    print "schwarz ε = {:.3g} ± {:.3g}".format(schwarz_popt[0], np.sqrt(schwarz_pconv.diagonal()[0]))
    print "weiss ε = {:.3g} ± {:.3g}".format(weiss_popt[0], np.sqrt(weiss_pconv.diagonal()[0]))

    pl.errorbar(glanz[:,0], glanz[:,1]-offset, xerr=T_err, yerr=U_err,
                label="glanz", color="gold", linestyle="none")
    pl.errorbar(matt[:,0], matt[:,1]-offset, xerr=T_err, yerr=U_err,
                label="matt", color="yellow", linestyle="none")
    pl.errorbar(schwarz[:,0], schwarz[:,1]-offset, xerr=T_err, yerr=U_err,
                label="schwarz", color="black", linestyle="none")
    pl.errorbar(weiss[:,0], weiss[:,1]-offset, xerr=T_err, yerr=U_err,
                label="weiss", color="gray", linestyle="none")
    pl.grid(True)
    pl.title(u"Lesliewürfel")
    pl.xlabel(ur"Temperatur $T / \mathrm{K}$")
    pl.ylabel(ur"Thermospannung $U / \mathrm{mV}$")
    pl.legend(loc="best")
    pl.savefig("Plot_b.pdf")
    pl.clf()


    data = np.genfromtxt("c-erste.csv", delimiter="\t")
    d = data[:,0]
    U = data[:,1]

    def c(d, I0, d0, offset):
        return I0 / (d - d0)**2 + offset

    d_err = 0.001
    U_err = 0.001

    popt, pconv = op.curve_fit(c, d, U)

    x = np.linspace(min(d), max(d))
    y = c(x, *popt)

    pl.plot(x, y, label="Fit")

    pl.errorbar(d, U, xerr=d_err, yerr=U_err, linestyle="none", marker="+",
                label="Messdaten")
    pl.grid(True)
    pl.legend(loc="best")
    pl.savefig("Plot_c-erste.pdf")
    pl.clf()

def _parse_args():
    """
    Parses the command line arguments.

    :return: Namespace with arguments.
    :rtype: Namespace
    """
    parser = argparse.ArgumentParser(description="")
    #parser.add_argument("args", metavar="N", type=str, nargs="*", help="Positional arguments.")
    #parser.add_argument("", dest="", type="", default=, help=)
    #parser.add_argument("--version", action="version", version="<the version>")

    return parser.parse_args()


if __name__ == "__main__":
    main()

#!/usr/bin/python
# -*- coding: utf-8 -*-

# Copyright © 2013 Martin Ueding <dev@martin-ueding.de>

import argparse
import matplotlib.pyplot as pl
import numpy as np
import scipy.optimize as op

__docformat__ = "restructuredtext en"

def main():
    options = _parse_args()

    a_data = np.recfromtxt("a.csv", delimiter="\t", dtype=[("phi", "f"), ("U", "f")])

    def malus(phi, phi0, I0, baseline):
        return I0 * (np.cos((phi - phi0)*np.pi/180))**2 + baseline

    popt, pconv = op.curve_fit(malus, a_data.phi, a_data.U, p0=[90, 2.5, 0.3])

    x = np.linspace(min(a_data.phi), max(a_data.phi), 100)
    y = malus(x, *popt)
    

    pl.errorbar(a_data.phi, a_data.U, xerr=1, yerr=0.01, label="Messdaten", linestyle="none", color="black")
    pl.plot(x, y, label="Fit", color="black")
    pl.grid(True)
    pl.legend(loc="best")
    pl.title(u"Intensitätstransmission nach zweitem Polfilter")
    pl.xlabel(ur"$\phi / ^\circ$")
    pl.ylabel(ur"$U / \mathrm{V}$")
    pl.savefig("a.pdf")
    pl.clf()

    b = {}

    for wavelength in [694, 620, 568, 520, 488, 458, 430]:
        b[wavelength] = np.recfromtxt("b-{0}.csv".format(wavelength), delimiter="\t", dtype=[("phi0", "f"), ("phi", "f")])

    print b


def _parse_args():
    """
    Parses the command line arguments.

    :return: Namespace with arguments.
    :rtype: Namespace
    """
    parser = argparse.ArgumentParser(description="")
    #parser.add_argument("args", metavar="N", type=str, nargs="*", help="Positional arguments.")
    #parser.add_argument("", dest="", type="", default=, help=)
    #parser.add_argument("--version", action="version", version="<the version>")

    return parser.parse_args()


if __name__ == "__main__":
    main()

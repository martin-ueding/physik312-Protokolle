#!/usr/bin/python
# -*- coding: utf-8 -*-

# Copyright © 2013 Martin Ueding <dev@martin-ueding.de>

import argparse
import matplotlib.pyplot as pl
import numpy as np
import mpl_toolkits.mplot3d.axes3d as p3

__docformat__ = "restructuredtext en"

def main():
    options = _parse_args()

    # Aufgabe a

    data = np.genfromtxt("a.csv")
    B = data[:,0] / 100
    Bild = data[:,1] / 100
    P = data[:,2] / 100
    Geg = data[:,3] / 100
    G = data[:,4] / 100

    gamma = B/G

    f = 0.05

    g = f * (1 + 1/gamma)
    b = f * (1 + 1/gamma)

    x2 = np.abs(Bild - P)
    x = np.abs(Geg - P)

    pl.plot(1 + 1/gamma, x, label="$x$", linestyle="none", marker="+")
    pl.xlabel(ur"$1 + 1/\gamma$")
    pl.ylabel("$x$")
    pl.grid(True)
    pl.savefig("Plot-a_x.pdf")
    pl.clf()

    pl.plot(1 + gamma, x2, label="$x'$", linestyle="none", marker="+")
    pl.xlabel(ur"$1 + \gamma$")
    pl.ylabel("$x'$")
    pl.grid(True)
    pl.savefig("Plot-a_xstrich.pdf")
    pl.clf()

    # Aufgabe d

    lx_err = 0.5
    
    b = 3.10
    b_err = 0.1

    f3 = 0.1
    G = 0.01
    B = 3.15e-2
    B_err = 0.5e-2

    gamma = B/G

    print "γ", gamma

    pl.clf()

    untergrund = 1.5

    data_e = np.genfromtxt("e.csv")
    data_f = np.genfromtxt("f.csv")
    data_g = np.genfromtxt("g.csv")

    fig = pl.figure()
    ax = p3.Axes3D(fig)
    ax.scatter(data_e[:,0], data_e[:,1], data_e[:,2]-untergrund, marker="x",
               color="red")
    ax.scatter(data_f[:,0], data_f[:,1], data_f[:,2]-untergrund, marker="o",
               color="green")
    ax.scatter(data_g[:,0], data_g[:,1], data_g[:,2]-untergrund, marker="^",
               color="blue")
    ax.set_xlabel(u"$x$")
    ax.set_ylabel(u"$y$")
    ax.set_zlabel(u"Beleuchtungsstärke $E/\mathrm{lx}$")
    pl.savefig("f.pdf")
    #pl.show()
    pl.clf()

    pl.errorbar(data_e[:,0]%5 + 5*data_e[:,1], data_e[:,2]-untergrund,
                yerr=np.ones(data_e[:,2].size)*lx_err, marker="o",
                label="normal", linestyle="none")
    pl.errorbar(data_f[:,0]%5 + 5*data_f[:,1], data_f[:,2]-untergrund,
                yerr=np.ones(data_f[:,2].size)*lx_err, marker="o",
                label="gedrehter Kondensor", linestyle="none")
    pl.errorbar(data_g[:,0]%5 + 5*data_g[:,1], data_g[:,2]-untergrund,
                yerr=np.ones(data_g[:,2].size)*lx_err, marker="o",
                label="anderes Objektiv", linestyle="none")
    pl.xlabel(ur"Feldnummer")
    pl.ylabel(u"Beleuchtungsstärke $E/\mathrm{lx}$")
    pl.grid(True)
    pl.legend(loc="right")
    pl.savefig("Plot-e_2D.pdf")

def _parse_args():
    """
    Parses the command line arguments.

    :return: Namespace with arguments.
    :rtype: Namespace
    """
    parser = argparse.ArgumentParser(description="")
    #parser.add_argument("args", metavar="N", type=str, nargs="*", help="Positional arguments.")
    #parser.add_argument("", dest="", type="", default=, help=)
    #parser.add_argument("--version", action="version", version="<the version>")

    return parser.parse_args()

if __name__ == "__main__":
    main()
